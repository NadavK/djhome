[circus]
#statsd = 1
#httpd = 1
httpd = False
#httpd_host = localhost
#httpd_port = 8080


[socket:wsgi]
host = 0.0.0.0
port = 8000

[socket:asgi]
host = 0.0.0.0
port = 8001

[watcher:wsgi]
cmd = /usr/local/bin/chaussette
args = --fd $(circus.sockets.wsgi) --backend tornado djhome.wsgi.application
use_sockets = True
#Settings this to more than 1 will call load_phidgets more than 1 time...
numprocesses = 1

#NOTE: Environment variables needs to be set in systemctl
copy_env = True
virtualenv = /home/pi/Envs/djhome

# will push in test.log the stream every 300 ms
stdout_stream.class = WatchedFileStream
stdout_stream.filename = $(circus.env.PYTHONPATH)/log/out_wsgi.log
stdout_stream.refresh_time = 0.3
stderr_stream.class = WatchedFileStream
stderr_stream.filename = $(circus.env.PYTHONPATH)/log/wsgi.log
stderr_stream.refresh_time = 0.3

# optionally rotate the log file when it reaches 5 mb
# and save 5 copied of rotated files
#stdout_stream.max_bytes = 5123456
#stdout_stream.max_bytes = 512345
#stdout_stream.backup_count = 10


[watcher:asgi]
cmd = daphne
args = -u $(circus.env.PYTHONPATH)/run/daphne.sock --fd $(circus.sockets.asgi) --access-log - --proxy-headers djhome.asgi:application
hooks.before_start=djhome.asgi.before_hook
hooks.before_spawn=djhome.asgi.before_hook
#Not sure if the above supports websocket http/2. Don't know how to test
#cmd = daphne -e ssl:443:privateKey=/etc/ssl/private/nginx/key.pem:certKey=/etc/ssl/private/nginx/cert.pem -u $(circus.env.PYTHONPATH)/run/daphne.sock --fd $(circus.sockets.asgi) --access-log - --proxy-headers djhome.asgi:application
#cmd = bash -c 'sleep 30 && exec daphne -u $(circus.env.PYTHONPATH)/run/daphne.sock djhome.asgi:channel_layer'
#cmd = daphne
#args = -u $(circus.env.PYTHONPATH)/run/daphne.sock djhome.asgi:channel_layer'
use_sockets = True
#Settings this to more than 1 will call load_phidgets more than 1 time...
numprocesses = 1
uid=pi

#NOTE: Environment variables needs to be set in systemctl
copy_env = True
virtualenv = /home/pi/Envs/djhome

# will push in test.log the stream every 300 ms
stdout_stream.class = WatchedFileStream
stdout_stream.filename = $(circus.env.PYTHONPATH)/log/out_asgi.log
stdout_stream.refresh_time = 0.3
stderr_stream.class = WatchedFileStream
stderr_stream.filename = $(circus.env.PYTHONPATH)/log/asgi.log
stderr_stream.refresh_time = 0.3


[watcher:phidget]
cmd = python
args = $(circus.env.PYTHONPATH)/PhidgetServer/main.py 0.0.0.0:8081
working_dir = $(circus.env.PYTHONPATH)
use_sockets = False
numprocesses = 1
#NOTE: Environment variables needs to be set in systemctl
copy_env = True
virtualenv = /home/pi/Envs/djhome
uid=pi

# will push in test.log the stream every 300 ms
stdout_stream.class = WatchedFileStream
stdout_stream.filename = $(circus.env.PYTHONPATH)/log/out_phidget.log
stdout_stream.refresh_time = 0.3
stderr_stream.class = WatchedFileStream
stderr_stream.filename = $(circus.env.PYTHONPATH)/log/phidget.log
stderr_stream.refresh_time = 0.3


[watcher:scheduler]
cmd = python
args = manage.py scheduler -i 3
working_dir = $(circus.env.PYTHONPATH)
use_sockets = False
numprocesses = 1
copy_env = True
virtualenv = /home/pi/Envs/djhome
uid = pi                                                                ; User to run as

# will push in test.log the stream every 300 ms
stdout_stream.class = WatchedFileStream
stdout_stream.filename = $(circus.env.PYTHONPATH)/log/out_scheduler.log
stdout_stream.refresh_time = 0.3
stderr_stream.class = WatchedFileStream
stderr_stream.filename = $(circus.env.PYTHONPATH)/log/scheduler.log
stderr_stream.refresh_time = 0.3


[watcher:worker]
cmd = python
args = manage.py rqworker default
working_dir = $(circus.env.PYTHONPATH)
use_sockets = False
numprocesses = 1
copy_env = True
virtualenv = /home/pi/Envs/djhome
uid = pi                                                                ; User to run as

# will push in test.log the stream every 300 ms
stdout_stream.class = WatchedFileStream
stdout_stream.filename = $(circus.env.PYTHONPATH)/log/out_worker.log
stdout_stream.refresh_time = 0.3
stderr_stream.class = WatchedFileStream
stderr_stream.filename = $(circus.env.PYTHONPATH)/log/worker.log
stderr_stream.refresh_time = 0.3


[watcher:rqdashboard]
cmd = rq-scheduler-dashboard
#cmd = rq-dashboard
working_dir = $(circus.env.PYTHONPATH)
use_sockets = False
numprocesses = 1
copy_env = True
virtualenv = /home/pi/Envs/djhome
uid = pi                                                                ; User to run as





#[env:wsgi]
#PYTHONUNBUFFERED=1
#PYTHONIOENCODING=utf-8

#[env:asgi]
#PYTHONUNBUFFERED=1
#PYTHONIOENCODING=utf-8

[env]
PYTHONPATH = /home/pi/djhome
PYTHONUNBUFFERED=1
PYTHONIOENCODING=utf-8
